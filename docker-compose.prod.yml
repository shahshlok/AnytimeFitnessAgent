version: '3.8'

services:
  # The PostgreSQL Database Service
  db:
    image: postgres:15
    container_name: af_postgres_db_prod
    restart: always
    environment:
      # Load database credentials from .env.prod file
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # Production volume for data persistence
      - postgres_data_prod:/var/lib/postgresql/data
    # No ports mapping - database is only accessible internally

  # The FastAPI Backend Service
  backend:
    build:
      # The build context is the directory where the Dockerfile is located.
      context: ./ai_agent/backend
      dockerfile: Dockerfile
    container_name: af_fastapi_backend_prod
    restart: always
    depends_on:
      # This ensures the 'db' service is started before the 'backend' service.
      - db
    environment:
      # The DATABASE_URL uses the service name 'db' as the hostname.
      # Docker's internal DNS resolves 'db' to the database container's IP address.
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      
      # These values will be read from the .env.prod file.
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      VECTOR_STORE_ID: ${VECTOR_STORE_ID}

      # Production CORS settings - restrict to your actual frontend domain
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    ports:
      # Maps port 8000 on the host VM to port 7479 inside the container.
      - "8000:7479"
    env_file:
      # Load all environment variables from production env file
      - .env.prod

# Top-level volume definition for persistence
volumes:
  # Production volume with different name to avoid conflicts
  postgres_data_prod: